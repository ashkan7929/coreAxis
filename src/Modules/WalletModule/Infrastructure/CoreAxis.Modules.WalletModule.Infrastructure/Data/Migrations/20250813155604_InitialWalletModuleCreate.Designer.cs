// <auto-generated />
using System;
using CoreAxis.Modules.WalletModule.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreAxis.Modules.WalletModule.Infrastructure.Data.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20250813155604_InitialWalletModuleCreate")]
    partial class InitialWalletModuleCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wallet")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("BalanceAfter")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IdempotencyKey")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RelatedTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TransactionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_Transactions_CorrelationId");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("IX_Transactions_CreatedOn");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Transactions_IdempotencyKey")
                        .HasFilter("[IdempotencyKey] IS NOT NULL");

                    b.HasIndex("Reference")
                        .HasDatabaseName("IX_Transactions_Reference");

                    b.HasIndex("RelatedTransactionId")
                        .HasDatabaseName("IX_Transactions_RelatedTransactionId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Transactions_Status");

                    b.HasIndex("TransactionTypeId")
                        .HasDatabaseName("IX_Transactions_TransactionTypeId");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("IX_Transactions_WalletId");

                    b.ToTable("Transactions", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_TransactionTypes_Code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_TransactionTypes_Name");

                    b.ToTable("TransactionTypes", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Wallets_UserId");

                    b.HasIndex("WalletTypeId")
                        .HasDatabaseName("IX_Wallets_WalletTypeId");

                    b.HasIndex("UserId", "WalletTypeId")
                        .IsUnique()
                        .HasDatabaseName("IX_Wallets_UserId_WalletTypeId");

                    b.ToTable("Wallets", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("DailyLimit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastResetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("MonthlyLimit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UsedDailyAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,8)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("UsedMonthlyAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,8)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_WalletContracts_ProviderId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_WalletContracts_UserId");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("IX_WalletContracts_WalletId");

                    b.HasIndex("WalletId", "ProviderId")
                        .IsUnique()
                        .HasDatabaseName("IX_WalletContracts_WalletId_ProviderId");

                    b.ToTable("WalletContracts", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ApiUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SupportsDeposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("SupportsWithdraw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_WalletProviders_Name");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_WalletProviders_Type");

                    b.ToTable("WalletProviders", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_WalletTypes_Name");

                    b.ToTable("WalletTypes", "wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.Transaction", "RelatedTransaction")
                        .WithMany()
                        .HasForeignKey("RelatedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedTransaction");

                    b.Navigation("TransactionType");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.WalletType", "WalletType")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletContract", b =>
                {
                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.WalletProvider", "Provider")
                        .WithMany("WalletContracts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoreAxis.Modules.WalletModule.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletContracts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("WalletContracts");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletProvider", b =>
                {
                    b.Navigation("WalletContracts");
                });

            modelBuilder.Entity("CoreAxis.Modules.WalletModule.Domain.Entities.WalletType", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
