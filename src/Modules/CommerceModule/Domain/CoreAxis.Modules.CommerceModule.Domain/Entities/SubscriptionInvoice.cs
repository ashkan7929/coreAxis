using CoreAxis.Modules.CommerceModule.Domain.Enums;
using CoreAxis.SharedKernel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace CoreAxis.Modules.CommerceModule.Domain.Entities;

/// <summary>
/// Represents an invoice for a subscription billing cycle.
/// </summary>
public class SubscriptionInvoice : EntityBase
{
    /// <summary>
    /// Gets or sets the ID of the subscription this invoice belongs to.
    /// </summary>
    public Guid SubscriptionId { get; set; }

    /// <summary>
    /// Gets or sets the subscription this invoice belongs to.
    /// </summary>
    public virtual Subscription Subscription { get; set; } = null!;

    /// <summary>
    /// Gets or sets the invoice number (human-readable identifier).
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string InvoiceNumber { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the status of the invoice.
    /// </summary>
    public SubscriptionInvoiceStatus Status { get; set; } = SubscriptionInvoiceStatus.Pending;

    /// <summary>
    /// Gets or sets the billing period start date.
    /// </summary>
    public DateTime PeriodStart { get; set; }

    /// <summary>
    /// Gets or sets the billing period end date.
    /// </summary>
    public DateTime PeriodEnd { get; set; }

    /// <summary>
    /// Gets or sets the date when the invoice was issued.
    /// </summary>
    public DateTime IssuedDate { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Gets or sets the due date for payment.
    /// </summary>
    public DateTime DueDate { get; set; }

    /// <summary>
    /// Gets or sets the date when the invoice was paid.
    /// </summary>
    public DateTime? PaidDate { get; set; }

    /// <summary>
    /// Gets or sets the subtotal amount before taxes and discounts.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal Subtotal { get; set; }

    /// <summary>
    /// Gets or sets the tax amount.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal TaxAmount { get; set; } = 0;

    /// <summary>
    /// Gets or sets the discount amount applied.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal DiscountAmount { get; set; } = 0;

    /// <summary>
    /// Gets or sets the total amount due.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal Total { get; set; }

    /// <summary>
    /// Gets or sets the amount that has been paid.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal AmountPaid { get; set; } = 0;

    /// <summary>
    /// Gets or sets the remaining amount due.
    /// </summary>
    [Column(TypeName = "decimal(18,2)")]
    public decimal AmountDue { get; set; }

    /// <summary>
    /// Gets or sets the currency code.
    /// </summary>
    [Required]
    [MaxLength(3)]
    public string Currency { get; set; } = "USD";

    /// <summary>
    /// Gets or sets the payment attempt count.
    /// </summary>
    public int PaymentAttempts { get; set; } = 0;

    /// <summary>
    /// Gets or sets the date of the last payment attempt.
    /// </summary>
    public DateTime? LastPaymentAttemptDate { get; set; }

    /// <summary>
    /// Gets or sets the error message from the last failed payment attempt.
    /// </summary>
    [MaxLength(1000)]
    public string? LastPaymentError { get; set; }

    /// <summary>
    /// Gets or sets the external invoice ID from payment provider.
    /// </summary>
    [MaxLength(100)]
    public string? ExternalInvoiceId { get; set; }

    /// <summary>
    /// Gets or sets the external payment ID from payment provider.
    /// </summary>
    [MaxLength(100)]
    public string? ExternalPaymentId { get; set; }

    /// <summary>
    /// Gets or sets the invoice line items as JSON.
    /// </summary>
    [Column(TypeName = "nvarchar(max)")]
    public string? LineItemsJson { get; set; }

    /// <summary>
    /// Gets or sets additional metadata as JSON.
    /// </summary>
    [Column(TypeName = "nvarchar(max)")]
    public string? MetadataJson { get; set; }

    /// <summary>
    /// Gets or sets the notes for this invoice.
    /// </summary>
    [MaxLength(1000)]
    public string? Notes { get; set; }

    /// <summary>
    /// Gets or sets whether this invoice was automatically generated.
    /// </summary>
    public bool IsAutoGenerated { get; set; } = true;

    /// <summary>
    /// Gets or sets the date when the invoice was voided.
    /// </summary>
    public DateTime? VoidedDate { get; set; }

    /// <summary>
    /// Gets or sets the reason for voiding the invoice.
    /// </summary>
    [MaxLength(500)]
    public string? VoidReason { get; set; }

    /// <summary>
    /// Checks if the invoice is overdue.
    /// </summary>
    public bool IsOverdue()
    {
        return Status == SubscriptionInvoiceStatus.Pending && DateTime.UtcNow > DueDate;
    }

    /// <summary>
    /// Checks if the invoice is fully paid.
    /// </summary>
    public bool IsFullyPaid()
    {
        return Status == SubscriptionInvoiceStatus.Paid && AmountDue <= 0;
    }

    /// <summary>
    /// Marks the invoice as paid.
    /// </summary>
    public void MarkAsPaid(decimal paidAmount, string? externalPaymentId = null)
    {
        Status = SubscriptionInvoiceStatus.Paid;
        PaidDate = DateTime.UtcNow;
        AmountPaid = paidAmount;
        AmountDue = Total - AmountPaid;
        ExternalPaymentId = externalPaymentId;
    }

    /// <summary>
    /// Marks the invoice as failed.
    /// </summary>
    public void MarkAsFailed(string errorMessage)
    {
        Status = SubscriptionInvoiceStatus.Failed;
        PaymentAttempts++;
        LastPaymentAttemptDate = DateTime.UtcNow;
        LastPaymentError = errorMessage;
    }

    /// <summary>
    /// Marks the invoice as refunded.
    /// </summary>
    public void MarkAsRefunded()
    {
        Status = SubscriptionInvoiceStatus.Refunded;
        AmountPaid = 0;
        AmountDue = Total;
    }

    /// <summary>
    /// Voids the invoice.
    /// </summary>
    public void Void(string reason)
    {
        VoidedDate = DateTime.UtcNow;
        VoidReason = reason;
        AmountDue = 0;
    }

    /// <summary>
    /// Calculates the total amount including tax and discounts.
    /// </summary>
    public void CalculateTotal()
    {
        Total = Subtotal + TaxAmount - DiscountAmount;
        AmountDue = Total - AmountPaid;
    }

    /// <summary>
    /// Records a payment attempt.
    /// </summary>
    public void RecordPaymentAttempt()
    {
        PaymentAttempts++;
        LastPaymentAttemptDate = DateTime.UtcNow;
    }
}