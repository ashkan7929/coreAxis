// <auto-generated />
using System;
using CoreAxis.Modules.ApiManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoreAxis.Modules.ApiManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApiManagerDbContext))]
    [Migration("20250816203912_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.SecurityProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RotationPolicy")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("SecurityProfiles", "ApiManager");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerTenantId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("SecurityProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerTenantId");

                    b.HasIndex("SecurityProfileId");

                    b.ToTable("WebServices", "ApiManager");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceCallLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("LatencyMs")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestDump")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseDump")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("WebServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("WebServiceId");

                    b.HasIndex("MethodId", "CreatedAt");

                    b.HasIndex("Succeeded", "CreatedAt");

                    b.ToTable("WebServiceCallLogs", "ApiManager");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CircuitPolicyJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RequestSchema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseSchema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetryPolicyJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeoutMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WebServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("WebServiceId");

                    b.HasIndex("WebServiceId", "Path", "HttpMethod")
                        .IsUnique();

                    b.ToTable("WebServiceMethods", "ApiManager");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.HasIndex("MethodId", "Name")
                        .IsUnique();

                    b.ToTable("WebServiceParams", "ApiManager");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebService", b =>
                {
                    b.HasOne("CoreAxis.Modules.ApiManager.Domain.SecurityProfile", "SecurityProfile")
                        .WithMany("WebServices")
                        .HasForeignKey("SecurityProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SecurityProfile");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceCallLog", b =>
                {
                    b.HasOne("CoreAxis.Modules.ApiManager.Domain.WebServiceMethod", "Method")
                        .WithMany("CallLogs")
                        .HasForeignKey("MethodId")
                        .IsRequired();

                    b.HasOne("CoreAxis.Modules.ApiManager.Domain.WebService", "WebService")
                        .WithMany("CallLogs")
                        .HasForeignKey("WebServiceId")
                        .IsRequired();

                    b.Navigation("Method");

                    b.Navigation("WebService");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceMethod", b =>
                {
                    b.HasOne("CoreAxis.Modules.ApiManager.Domain.WebService", "WebService")
                        .WithMany("Methods")
                        .HasForeignKey("WebServiceId")
                        .IsRequired();

                    b.Navigation("WebService");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceParam", b =>
                {
                    b.HasOne("CoreAxis.Modules.ApiManager.Domain.WebServiceMethod", "Method")
                        .WithMany("Parameters")
                        .HasForeignKey("MethodId")
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.SecurityProfile", b =>
                {
                    b.Navigation("WebServices");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebService", b =>
                {
                    b.Navigation("CallLogs");

                    b.Navigation("Methods");
                });

            modelBuilder.Entity("CoreAxis.Modules.ApiManager.Domain.WebServiceMethod", b =>
                {
                    b.Navigation("CallLogs");

                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
