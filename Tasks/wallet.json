{
    "applyOn": "CURRENT CODEBASE",
    "rootNotes": [
        "هیچ ماژولی مستقیم به ماژول دیگر رفرنس نداشته باشد؛ فقط به SharedKernel/Contracts/Ports.",
        "پروفایل ها: local-stub | integration | production (با DI متفاوت)."
    ],
    "milestone": "M1 on current codebase - Contract-first + Wallet slice",
    "tasks": [
        {
            "id": "SK-ADD-001",
            "title": "Create SharedKernel (Contracts/Ports/Outbox/Observability)",
            "type": "new-project",
            "files": [
                "CoreAxis.SharedKernel/Contracts/Events/*.cs",
                "CoreAxis.SharedKernel/Ports/*.cs",
                "CoreAxis.SharedKernel/Outbox/{OutboxMessage.cs, OutboxPublisher.cs}",
                "CoreAxis.SharedKernel/Messaging/InMemoryEventBus.cs",
                "CoreAxis.SharedKernel/Observability/CorrelationMiddleware.cs"
            ],
            "actions": [
                "Contracts(v1): UserRegistered, OrderPlaced, PriceQuoted, PriceLocked, PaymentInitiated, PaymentConfirmed, CommissionCalculated (همراه correlationId, causationId, tenantId, schemaVersion).",
                "Ports: IPriceProvider, IWorkflowClient, ICommissionEngine, IPaymentGateway, INotificationClient (همه async + CancellationToken).",
                "Outbox: Entity + HostedService Publisher (retry/backoff) + مارک‌کردن Processed.",
                "InMemoryEventBus: Publish/Subscribe ساده برای پروفایل local-stub.",
                "CorrelationMiddleware: تولید/خواندن X-Correlation-Id و enrich کردن لاگ‌ها."
            ],
            "acceptanceCriteria": [
                "Serialize/Deserialize رویدادها اوکی.",
                "پابلیشر Outbox روی in-memory bus کار کند؛ بدون subscriber خطا ندهد."
            ],
            "priority": "critical"
        },
        {
            "id": "WLT-PREC-002",
            "title": "Precision & Concurrency on Wallet",
            "type": "code-change",
            "files": [
                "Modules/WalletModule/Infrastructure/CoreAxis.Modules.WalletModule.Infrastructure/Data/Configurations/WalletConfiguration.cs",
                "Modules/WalletModule/Domain/CoreAxis.Modules.WalletModule.Domain/Entities/Wallet.cs"
            ],
            "actions": [
                "Wallet.cs: افزودن RowVersion (byte[]) و فیلد Balance اگر نیست.",
                "WalletConfiguration.cs: HasPrecision(18,6) برای Balance؛ IsRowVersion/IsConcurrencyToken برای RowVersion؛ ایندکس یکتا روی (UserId, AssetCode یا WalletTypeId)."
            ],
            "acceptanceCriteria": [
                "Migration جدید: Balance با precision 18,6؛ RowVersion به‌عنوان ConcurrencyToken.",
                "Concurrent update باعث DbUpdateConcurrencyException شود و با retry حل شود."
            ],
            "priority": "critical"
        },
        {
            "id": "WLT-IDEMP-003",
            "title": "Idempotency for Transactions",
            "type": "code-change",
            "files": [
                "Modules/WalletModule/Domain/CoreAxis.Modules.WalletModule.Domain/Entities/Transaction.cs",
                "Modules/WalletModule/Infrastructure/CoreAxis.Modules.WalletModule.Infrastructure/Data/Configurations/TransactionConfiguration.cs",
                "Modules/WalletModule/Api/CoreAxis.Modules.WalletModule.Api/Controllers/TransactionController.cs"
            ],
            "actions": [
                "Transaction.cs: اضافه‌کردن IdempotencyKey (string 64) و CorrelationId (Guid) و Metadata (json).",
                "TransactionConfiguration.cs: HasIndex(IdempotencyKey).IsUnique(); HasPrecision(18,6) برای Amount/BalanceAfter (اگر نیست).",
                "TransactionController: خواندن هدر Idempotency-Key و پاس دادن به سرویس."
            ],
            "acceptanceCriteria": [
                "درخواست تکراری با Idempotency-Key یکسان نتیجهٔ جدید نسازد؛ همان نتیجه قبلی را بدهد."
            ],
            "priority": "critical"
        },
        {
            "id": "WLT-ATOMIC-004",
            "title": "Atomic EF Transaction on handlers",
            "type": "code-change",
            "files": [
                "Modules/WalletModule/Application/CoreAxis.Modules.WalletModule.Application/Handlers/TransactionCommandHandlers.cs",
                "Modules/WalletModule/Application/CoreAxis.Modules.WalletModule.Application/Services/TransactionService.cs"
            ],
            "actions": [
                "برای Deposit/Withdraw/Transfer از DbContext.Database.BeginTransaction استفاده کن.",
                "Transfer: دو آپدیت کیف‌پول + دو رکورد تراکنش در یک تراکنش DB.",
                "پس از موفقیت، رویداد TransactionCreated.v1 را در Outbox ثبت کن (نه publish مستقیم).",
                "Retry حداکثر 3 بار روی DbUpdateConcurrencyException."
            ],
            "acceptanceCriteria": [
                "اگر هر مرحله fail شود، کل عملیات rollback.",
                "بعد از Commit، OutboxPublisher پیام را منتشر کند."
            ],
            "priority": "critical"
        },
        {
            "id": "WLT-ACL-005",
            "title": "JWT scoping + ACL on Wallet APIs",
            "type": "code-change",
            "files": [
                "Modules/WalletModule/Api/CoreAxis.Modules.WalletModule.Api/Controllers/WalletController.cs",
                "Modules/WalletModule/Api/CoreAxis.Modules.WalletModule.Api/Controllers/TransactionController.cs"
            ],
            "actions": [
                "گرفتن UserId از JWT (ClaimTypes.NameIdentifier) و اعمال اسکوپ روی همه Queryها.",
                "افزودن [HasPermission(\"WALLET\",\"READ/DEPOSIT/WITHDRAW/TRANSFER\")] روی اکشن‌ها.",
                "بررسی مالکیت کیف‌پول هنگام عملیات."
            ],
            "acceptanceCriteria": [
                "کاربر فقط کیف‌پول‌های خودش را می‌بیند/استفاده می‌کند.",
                "بدون Permission مناسب → 403."
            ],
            "priority": "high",
            "dependencies": [
                "Auth & ACL policies"
            ]
        },
        {
            "id": "PORT-PRICE-006",
            "title": "IPriceProvider + Stub",
            "type": "new-code",
            "files": [
                "CoreAxis.SharedKernel/Ports/IPriceProvider.cs",
                "Adapters/Stubs/InMemoryPriceProvider.cs"
            ],
            "actions": [
                "متد GetQuoteAsync(assetCode, qty, context, ct) با خروجی {price, ts, providerId, expiresIn}.",
                "استاب in-memory برای پروفایل local-stub: قیمت پایه از کانفیگ + اسپرد."
            ],
            "acceptanceCriteria": [
                "Quote برای هر assetCode (XAU/IRR/...) کار کند.",
                "در پروفایل local-stub رجیستر شود."
            ],
            "priority": "high"
        },
        {
            "id": "ORD-MIN-007",
            "title": "Minimal generic Order + OrderPlaced event",
            "type": "new-code",
            "files": [
                "Modules/ProductOrder/Domain/Entities/Order.cs",
                "Modules/ProductOrder/Domain/Entities/OrderLine.cs",
                "Modules/ProductOrder/Api/Controllers/OrdersController.cs"
            ],
            "actions": [
                "OrderLine.AttributesSnapshot (JSON) برای داینامیک بودن.",
                "POST /orders/place → publish OrderPlaced.v1 (Outbox)."
            ],
            "acceptanceCriteria": [
                "ثبت سفارش برای هر محصول/دارایی بدون تغییر کد دامنه ممکن باشد."
            ],
            "priority": "high"
        },
        {
            "id": "WF-STUB-008",
            "title": "Workflow stub (Quote→Lock)",
            "type": "new-code",
            "files": [
                "CoreAxis.SharedKernel/Ports/IWorkflowClient.cs",
                "Adapters/Stubs/WorkflowClientStub.cs"
            ],
            "actions": [
                "On OrderPlaced.v1: call IPriceProvider → publish PriceQuoted.v1 → سپس PriceLocked.v1 با expiry (مثلاً 120s).",
                "Persist ساده state (in-memory/DB) برای تست‌های E2E."
            ],
            "acceptanceCriteria": [
                "قیمت قفل‌شده با زمان انقضا ذخیره و برگردد."
            ],
            "priority": "high"
        },
        {
            "id": "WF-PAY-009",
            "title": "Payment via Wallet (idempotent)",
            "type": "orchestration",
            "files": [
                "Modules/ProductOrder/Application/Handlers/PaymentHandlers.cs"
            ],
            "actions": [
                "در پاسخ PriceLocked.v1: Withdraw از کیف‌پول خریدار با Idempotency-Key.",
                "موفقیت → PaymentConfirmed.v1 (Outbox)."
            ],
            "acceptanceCriteria": [
                "پرداخت idempotent؛ بدون debit تکراری در retry."
            ],
            "priority": "critical",
            "dependencies": [
                "WLT-ATOMIC-004"
            ]
        },
        {
            "id": "OBS-LOG-010",
            "title": "Observability wiring",
            "type": "ops",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/Program.cs"
            ],
            "actions": [
                "افزودن CorrelationMiddleware (SharedKernel) در ابتدای pipeline.",
                "Serilog enricher: correlationId, userId, tenantId در همهٔ لاگ‌ها."
            ],
            "acceptanceCriteria": [
                "هر درخواست و رویداد با یک CorrelationId قابل رهگیری باشد."
            ],
            "priority": "high"
        },
        {
            "id": "E2E-TEST-011",
            "title": "End-to-End test (local-stub)",
            "type": "test",
            "files": [
                "Tests/E2E/OrderWalletFlowTests.cs"
            ],
            "actions": [
                "سناریو: /orders/place → PriceQuoted → PriceLocked → /wallet/withdraw → PaymentConfirmed.",
                "پروفایل local-stub: استاب‌های Workflow/Price فعال باشند."
            ],
            "acceptanceCriteria": [
                "سناریو کامل پاس شود؛ جایگزینی استاب PriceProvider با آداپتر واقعی تست را نمی‌شکند."
            ],
            "priority": "critical"
        }
    ]
}