{
    "milestone": "M1 - Contract-first + Wallet slice (end-to-end, dynamic)",
    "assumptions": [
        "Auth & ACL در حال تکمیل طبق تسک‌های قبلی (HasPermission + RoleClaims).",
        "EF Core + SQL آماده است. هدف: DB-agnostic (SQL Server/Postgres)."
    ],
    "tasks": [
        {
            "id": "PORTS-001",
            "title": "Define integration ports (interfaces)",
            "type": "design",
            "files": [
                "SharedKernel/Ports/*.cs"
            ],
            "actions": [
                "Create IPriceProvider.GetQuoteAsync(assetCode, quantity, context, ct)",
                "Create IWorkflowClient.StartAsync(definitionId, context, ct) & SignalAsync(eventName, payload, ct)",
                "Create ICommissionEngine.CalculateAsync(paymentCtx, ct)",
                "Create IPaymentGateway.ChargeAsync(request, ct) & VerifyAsync(refId, ct)",
                "Create INotificationClient.SendAsync(message, ct)"
            ],
            "acceptanceCriteria": [
                "هیچ ماژولی مستقیم به پروژهٔ دیگری رفرنس نداشته باشد؛ فقط به Ports.",
                "همه متدها async و cancellation-aware باشند."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "EVENTS-002",
            "title": "Versioned event contracts (v1)",
            "type": "design",
            "files": [
                "SharedKernel/Contracts/Events/*.cs"
            ],
            "actions": [
                "Define: UserRegistered.v1, OrderPlaced.v1, PriceQuoted.v1, PriceLocked.v1, PaymentInitiated.v1, PaymentConfirmed.v1, CommissionCalculated.v1",
                "تمام رویدادها شامل: correlationId, causationId, tenantId, occurredOn, schemaVersion"
            ],
            "acceptanceCriteria": [
                "Contracts با System.Text.Json serialize/deserialize شوند.",
                "Policy برای backward-compatibility مستند باشد (فیلد جدید اختیاری)."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "OUTBOX-003",
            "title": "Outbox infrastructure + in-memory event bus",
            "type": "infra",
            "files": [
                "SharedKernel/Outbox/OutboxMessage.cs",
                "SharedKernel/Outbox/OutboxPublisher.cs",
                "SharedKernel/Messaging/InMemoryEventBus.cs"
            ],
            "actions": [
                "OutboxMessage(Id,OccurredOn,Type,Payload,Headers,ProcessedOn,Attempt)",
                "HostedService: publish از Outbox به InMemoryEventBus با retry/backoff",
                "Consumerها idempotent باشند (بر اساس MessageId/CorrelationId)"
            ],
            "acceptanceCriteria": [
                "در صورت Crash پس از Commit، پیام‌ها بعداً منتشر شوند.",
                "بدون Subscriber هم خطا ندهد (log فقط)."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "EVENTS-002"
            ]
        },
        {
            "id": "FLAGS-004",
            "title": "Feature flags / profiles (stub vs real)",
            "type": "config",
            "files": [
                "App/Configuration/Profiles.cs",
                "appsettings*.json"
            ],
            "actions": [
                "Profiles: local-stub | integration | production",
                "DI: در local-stub، استاب‌ها ثبت شوند؛ در integration به آداپترهای واقعی وصل شود"
            ],
            "acceptanceCriteria": [
                "تعویض بین استاب/واقعی فقط با کانفیگ ممکن باشد (بدون تغییر کد دامنه)."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "PORTS-001"
            ]
        },
        {
            "id": "WALLET-005",
            "title": "Wallet hardening (precision + concurrency + idempotency)",
            "type": "data-model",
            "files": [
                "Modules/WalletModule/Infrastructure/.../Data/Configurations/*.cs",
                "Modules/WalletModule/Domain/Entities/*.cs"
            ],
            "actions": [
                "Set HasPrecision(18,6) برای Wallet.Balance و تمام Amountها (در TransactionConfiguration موجود است؛ برای Balance هم اضافه شود).",
                "افزودن Wallet.RowVersion(byte[]) و IsConcurrencyToken + retry روی DbUpdateConcurrencyException",
                "Transaction.IdempotencyKey (unique) + CorrelationId + Metadata(json)",
                "ایندکس یکتا (UserId, AssetCode) یا (UserId, WalletTypeId)"
            ],
            "acceptanceCriteria": [
                "Migration جدید precision/concurrency/idempotency را اعمال کند.",
                "درخواست تکراری با Idempotency-Key نتیجهٔ تکراری ایجاد نکند."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "WALLET-006",
            "title": "Atomic EF transaction for Deposit/Withdraw/Transfer",
            "type": "service",
            "files": [
                "Modules/WalletModule/Application/.../Handlers/TransactionCommandHandlers.cs"
            ],
            "actions": [
                "DbContext.Database.BeginTransaction در هر عملیات مالی",
                "Transfer: دو رکورد تراکنش + آپدیت دو کیف‌پول در یک تراکنش",
                "Persist TransactionCreated.v1 در Outbox همان‌جا"
            ],
            "acceptanceCriteria": [
                "اگر یک آپدیت fail شود، کل عملیات rollback شود.",
                "پس از Commit، رویداد از Outbox منتشر شود."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "OUTBOX-003",
                "WALLET-005"
            ]
        },
        {
            "id": "WALLET-007",
            "title": "API enforcement (JWT scope + ACL + Idempotency-Key)",
            "type": "api",
            "files": [
                "Modules/WalletModule/Api/.../Controllers/WalletController.cs",
                "Modules/WalletModule/Api/.../Controllers/TransactionController.cs"
            ],
            "actions": [
                "گرفتن UserId از JWT و اعمال اسکوپ روی تمام Queryها",
                "افزودن [HasPermission(\"WALLET\",\"READ/DEPOSIT/WITHDRAW/TRANSFER\")] روی اکشن‌ها",
                "پذیرش هدر Idempotency-Key و پاس‌دادن آن به سرویس"
            ],
            "acceptanceCriteria": [
                "بدون Permission → 403؛ با Permission → 200",
                "Idempotency-Key تکراری → پاسخ idempotent"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "FLAGS-004"
            ]
        },
        {
            "id": "STUB-PRICE-008",
            "title": "InMemory price provider stub (generic)",
            "type": "feature",
            "files": [
                "Adapters/Stubs/InMemoryPriceProvider.cs"
            ],
            "actions": [
                "پیاده‌سازی IPriceProvider برای هر assetCode (XAU, IRR, BTC, ...)",
                "فرمول نمونه: قیمت پایه از config + ضریب/اسپرد؛ خروجی: {price, timestamp, providerId, expiresIn}"
            ],
            "acceptanceCriteria": [
                "Quote برای هر assetCode کار کند.",
                "در پروفایل local-stub رجیستر شود."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "PORTS-001",
                "FLAGS-004"
            ]
        },
        {
            "id": "ORDER-009",
            "title": "Minimal generic Order + place endpoint",
            "type": "feature",
            "files": [
                "Modules/ProductOrder/Domain/Entities/{Order,OrderLine}.cs",
                "Modules/ProductOrder/Api/Controllers/OrdersController.cs"
            ],
            "actions": [
                "OrderLine.AttributesSnapshot (JSON) برای داینامیک بودن",
                "POST /orders/place → publish OrderPlaced.v1 (با correlationId/tenantId)"
            ],
            "acceptanceCriteria": [
                "ثبت سفارش برای هر محصول/دارایی بدون تغییر کد دامنه ممکن باشد."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "EVENTS-002",
                "FLAGS-004"
            ]
        },
        {
            "id": "WF-010",
            "title": "Workflow stub (quote→lock)",
            "type": "feature",
            "files": [
                "Adapters/Stubs/WorkflowClientStub.cs"
            ],
            "actions": [
                "On OrderPlaced.v1 → call IPriceProvider → publish PriceQuoted.v1",
                "Lock: تولید PriceLocked.v1 با expiry (مثلاً 120s) و ذخیره state ساده (in-memory/DB)"
            ],
            "acceptanceCriteria": [
                "قیمت قفل‌شده با زمان انقضا برگردد.",
                "State برای تست‌ها پایدار بماند."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "STUB-PRICE-008",
                "OUTBOX-003"
            ]
        },
        {
            "id": "WF-PAY-011",
            "title": "Payment via Wallet (idempotent)",
            "type": "orchestration",
            "files": [
                "Modules/ProductOrder/Application/Handlers/PaymentHandlers.cs"
            ],
            "actions": [
                "در پاسخ PriceLocked.v1 → Withdraw از کیف پول خریدار با Idempotency-Key",
                "On success → publish PaymentConfirmed.v1"
            ],
            "acceptanceCriteria": [
                "پرداخت idempotent باشد.",
                "در صورت شکست، هیچ debit تکراری رخ ندهد."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "WALLET-006",
                "OUTBOX-003"
            ]
        },
        {
            "id": "E2E-012",
            "title": "End-to-end test (local-stub profile)",
            "type": "test",
            "files": [
                "Tests/E2E/OrderWalletFlowTests.cs"
            ],
            "actions": [
                "Scenario: place order → quote → lock → wallet withdraw → payment confirmed",
                "تست بدون ماژول‌های واقعی و فقط با استاب‌ها سبز شود"
            ],
            "acceptanceCriteria": [
                "سناریو از ابتدا تا انتها پاس شود.",
                "تعویض استاب PriceProvider با آداپتر واقعی، تست‌ها را نشکند."
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "WF-PAY-011"
            ]
        },
        {
            "id": "OBS-013",
            "title": "Observability (correlation + structured logs)",
            "type": "ops",
            "files": [
                "SharedKernel/Observability/CorrelationMiddleware.cs"
            ],
            "actions": [
                "Middleware: تنظیم CorrelationId برای هر درخواست",
                "Serilog enrichers: correlationId, userId, tenantId در همهٔ لاگ‌ها"
            ],
            "acceptanceCriteria": [
                "کل فلو با یک CorrelationId قابل رهگیری باشد."
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": []
        }
    ]
}