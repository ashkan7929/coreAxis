{
    "module": "Auth & ACL",
    "version": "1.0",
    "tasks": [
        {
            "id": "AUTH-PIPE-001",
            "title": "Enable Authentication middleware in API Gateway",
            "type": "code-change",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/Program.cs"
            ],
            "actions": [
                "Insert app.UseAuthentication() before app.UseAuthorization()"
            ],
            "acceptanceCriteria": [
                "Requests to [Authorize] endpoints without token return 401",
                "Requests with valid JWT pass authentication stage"
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "AUTH-DI-002",
            "title": "Ensure Auth module DI registration executes",
            "type": "code-review",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/Program.cs"
            ],
            "actions": [
                "Verify builder.Services.AddAuthModuleApi(configuration) is called before builder.Build()"
            ],
            "acceptanceCriteria": [
                "JwtBearer and Authorization services present in ServiceProvider at runtime (startup logs show JWT configured)"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "AUTH-TOKEN-003",
            "title": "Add role claims to JWT",
            "type": "code-change",
            "files": [
                "Modules/AuthModule/Infrastructure/CoreAxis.Modules.AuthModule.Infrastructure/Services/JwtTokenService.cs",
                "Modules/AuthModule/Domain/... (User/Role repositories)"
            ],
            "actions": [
                "Inject IUserRepository (or RoleRepository) into JwtTokenService",
                "Implement GetUserRolesAsync(userId) if missing",
                "Append ClaimTypes.Role for each role in GenerateToken/GenerateTokenAsync"
            ],
            "acceptanceCriteria": [
                "Decoded JWT contains 'role' claims",
                "[Authorize(Roles=\"Admin\")] protects endpoints correctly"
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "AUTH-DI-002"
            ]
        },
        {
            "id": "AUTH-PERM-004",
            "title": "Implement PermissionRequirement + AuthorizationHandler",
            "type": "code-add",
            "files": [
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/Authz/PermissionRequirement.cs",
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/Authz/PermissionAuthorizationHandler.cs",
                "Modules/AuthModule/Domain/.../Repositories/IPermissionRepository.cs"
            ],
            "actions": [
                "Create PermissionRequirement(page, action)",
                "Create PermissionAuthorizationHandler using IPermissionRepository.UserHasPermissionAsync(userId, page, action)"
            ],
            "acceptanceCriteria": [
                "Handler returns success when user has the specific permission",
                "Deny (403) when permission not granted"
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "AUTH-DI-002"
            ]
        },
        {
            "id": "AUTH-PERM-005",
            "title": "Add HasPermissionAttribute",
            "type": "code-add",
            "files": [
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/Authz/HasPermissionAttribute.cs"
            ],
            "actions": [
                "Create AuthorizeAttribute wrapper that sets Policy = \"perm:{PAGE}:{ACTION}\""
            ],
            "acceptanceCriteria": [
                "Controllers can decorate actions with [HasPermission(\"AUTH.USERS\",\"READ\")]"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-PERM-004"
            ]
        },
        {
            "id": "AUTH-PERM-006",
            "title": "Dynamic Permission Policy Provider + DI registration",
            "type": "code-add",
            "files": [
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/Authz/PermissionPolicyProvider.cs",
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/DependencyInjection.cs"
            ],
            "actions": [
                "Implement IAuthorizationPolicyProvider that builds policies matching 'perm:{PAGE}:{ACTION}'",
                "Register IAuthorizationPolicyProvider (Singleton) and PermissionAuthorizationHandler (Scoped) in AddAuthModuleApi"
            ],
            "acceptanceCriteria": [
                "No static AddPolicy calls required; policies generated on demand",
                "[HasPermission] attributes enforce authorization at runtime"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-PERM-004",
                "AUTH-PERM-005"
            ]
        },
        {
            "id": "AUTH-SEED-007",
            "title": "Seed Roles/Pages/Actions/Permissions baseline",
            "type": "data-seed",
            "files": [
                "Modules/AuthModule/Infrastructure/CoreAxis.Modules.AuthModule.Infrastructure/Data/AuthDbContext.cs",
                "Modules/AuthModule/Infrastructure/.../Data/AuthDataSeeder.cs (new)"
            ],
            "actions": [
                "Create migration and seeder for Admin/User roles",
                "Insert Pages and Actions (e.g., AUTH.USERS READ/WRITE, AUTH.ROLES READ/WRITE)",
                "Map Admin -> all permissions"
            ],
            "acceptanceCriteria": [
                "Fresh DB contains baseline roles/permissions after first run/migration",
                "Admin user can access protected endpoints; normal user denied where expected"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-PERM-004",
                "AUTH-PERM-006"
            ]
        },
        {
            "id": "AUTH-LOG-008",
            "title": "Log User-Agent alongside IP in access logs",
            "type": "code-change",
            "files": [
                "Modules/AuthModule/API/CoreAxis.Modules.AuthModule.API/Controllers/AuthController.cs"
            ],
            "actions": [
                "Capture Request.Headers[\"User-Agent\"] on login/failed login",
                "Persist in AccessLog entity"
            ],
            "acceptanceCriteria": [
                "AccessLog records contain IpAddress and UserAgent",
                "Indices on Timestamp and (UserId, Timestamp) preserved"
            ],
            "priority": "medium",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "AUTH-SWAG-009",
            "title": "Configure Swagger Bearer security",
            "type": "code-change",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/Program.cs"
            ],
            "actions": [
                "Add Bearer SecurityScheme and SecurityRequirement to SwaggerGen"
            ],
            "acceptanceCriteria": [
                "Swagger UI shows 'Authorize' button",
                "After entering JWT, protected endpoints callable from Swagger"
            ],
            "priority": "medium",
            "status": "pending",
            "dependencies": [
                "AUTH-PIPE-001",
                "AUTH-DI-002"
            ]
        },
        {
            "id": "AUTH-SET-010",
            "title": "Provide JWT config in appsettings",
            "type": "config",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/appsettings.json",
                "appsettings.Development.json"
            ],
            "actions": [
                "Set Jwt:Issuer, Jwt:Audience, Jwt:Secret (>= 32 bytes) and token expiration settings",
                "Ensure DependencyInjection reads the same keys"
            ],
            "acceptanceCriteria": [
                "JWT validation uses configured issuer/audience/secret",
                "ClockSkew set to 0; expired tokens rejected"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-DI-002"
            ]
        },
        {
            "id": "AUTH-TEST-011",
            "title": "Unit tests: PasswordHasher",
            "type": "test",
            "files": [
                "Tests/Auth.Tests/PasswordHasherTests.cs"
            ],
            "actions": [
                "Test Hash/Verify for normal, empty, unicode, long passwords",
                "Ensure different salts produce different hashes"
            ],
            "acceptanceCriteria": [
                "All PasswordHasher unit tests pass"
            ],
            "priority": "medium",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "AUTH-TEST-012",
            "title": "Unit tests: JwtTokenService with role claims",
            "type": "test",
            "files": [
                "Tests/Auth.Tests/JwtTokenServiceTests.cs"
            ],
            "actions": [
                "Mock role retrieval; ensure 'role' claims are present",
                "Validate token; expired/invalid tokens fail"
            ],
            "acceptanceCriteria": [
                "All JwtTokenService unit tests pass"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-TOKEN-003"
            ]
        },
        {
            "id": "AUTH-TEST-013",
            "title": "Unit tests: PermissionAuthorizationHandler",
            "type": "test",
            "files": [
                "Tests/Auth.Tests/PermissionAuthorizationHandlerTests.cs"
            ],
            "actions": [
                "Mock IPermissionRepository to return true/false",
                "Assert Succeed when permission exists; otherwise Deny"
            ],
            "acceptanceCriteria": [
                "All handler unit tests pass"
            ],
            "priority": "high",
            "status": "pending",
            "dependencies": [
                "AUTH-PERM-004",
                "AUTH-PERM-006"
            ]
        },
        {
            "id": "AUTH-TEST-014",
            "title": "Integration tests: Auth endpoints and permission checks",
            "type": "test",
            "files": [
                "Tests/Auth.IntegrationTests/AuthFlowTests.cs"
            ],
            "actions": [
                "Login → receive JWT",
                "Call [Authorize] endpoint w/o token → 401",
                "Call with token but without permission → 403",
                "Grant permission → same call → 200"
            ],
            "acceptanceCriteria": [
                "End-to-end auth/permission flow works"
            ],
            "priority": "critical",
            "status": "pending",
            "dependencies": [
                "AUTH-PIPE-001",
                "AUTH-TOKEN-003",
                "AUTH-PERM-006",
                "AUTH-SEED-007"
            ]
        },
        {
            "id": "AUTH-CACHE-015",
            "title": "Cache user permissions (optional)",
            "type": "enhancement",
            "files": [
                "Modules/AuthModule/API/.../Authz/*",
                "Infrastructure caching layer"
            ],
            "actions": [
                "Cache permission set per userId with version stamp",
                "Invalidate cache on permission/role change"
            ],
            "acceptanceCriteria": [
                "Permission check latency improves; cache invalidates correctly"
            ],
            "priority": "low",
            "status": "pending",
            "dependencies": [
                "AUTH-PERM-006"
            ]
        },
        {
            "id": "AUTH-RATE-016",
            "title": "Login rate limiting (optional)",
            "type": "enhancement",
            "files": [
                "ApiGateway/CoreAxis.ApiGateway/Program.cs"
            ],
            "actions": [
                "Add ASP.NET rate limiting for /auth/login by IP/username"
            ],
            "acceptanceCriteria": [
                "Excessive login attempts receive 429 or custom response"
            ],
            "priority": "low",
            "status": "pending",
            "dependencies": []
        },
        {
            "id": "AUTH-REFRESH-017",
            "title": "Refresh Token flow (optional)",
            "type": "feature",
            "files": [
                "Modules/AuthModule/Domain/.../Entities/RefreshToken.cs",
                "Modules/AuthModule/API/.../Controllers/AuthController.cs"
            ],
            "actions": [
                "Issue, rotate, revoke refresh tokens",
                "Add /auth/refresh endpoint"
            ],
            "acceptanceCriteria": [
                "Access token can be renewed without re-login until refresh expiry",
                "Compromised refresh tokens can be revoked"
            ],
            "priority": "low",
            "status": "pending",
            "dependencies": [
                "AUTH-TOKEN-003"
            ]
        },
        {
            "id": "AUTH-HEALTH-018",
            "title": "Auth health check endpoint",
            "type": "ops",
            "files": [
                "Modules/AuthModule/API/.../AuthModule.cs or HealthController.cs"
            ],
            "actions": [
                "Add /auth/health returning 200 with DB connectivity status"
            ],
            "acceptanceCriteria": [
                "Monitoring systems can probe /auth/health successfully"
            ],
            "priority": "medium",
            "status": "pending",
            "dependencies": []
        }
    ]
}