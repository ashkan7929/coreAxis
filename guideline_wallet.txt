📌 Vision (چشم‌انداز)
این ماژول مسئول مدیریت موجودی کاربران (Walletها) و تراکنش‌هاشونه.
امکاناتش:

ساخت کیف پول‌های مختلف برای هر کاربر (اعتباری، کمیسیونی، …)

ثبت تراکنش‌ها (واریز، برداشت، انتقال، کمیسیون)

اتصال به تأمین‌کننده‌ها (Providerها) برای عملیات واقعی

گزارش‌گیری تراکنش‌ها

چند‌سازمانی (multi-tenant) و امنیت دسترسی

📦 ارتباط با Auth + ACL
هر تراکنش باید بدونه کدوم UserId انجامش داده (از JWT Auth می‌گیریم).

سطح دسترسی‌ها (چه کسی می‌تونه واریز کنه؟ چه کسی می‌تونه برداشت کنه؟) توسط ACL کنترل می‌شه.

TenantId از توکن Auth میاد و همهٔ داده‌ها باید براساس همون فیلتر بشه.
✨ Guidelines ویژه برای برنامه‌نویس
✅ همان معماری Phase 0 (Domain, Application, Infrastructure, API).
✅ SOLID و Clean Code:

WalletService فقط مسئول منطق کیف پول باشه.

TransactionService فقط مسئول منطق تراکنش باشه.

✅ Atomicity:

تراکنش‌ها و تغییر موجودی حتماً داخل یک EF Core Transaction انجام بشه.

✅ Multi-Tenant:

همه جا TenantId از JWT گرفته بشه.

✅ Integration Events:

هر تراکنش یک DomainEvent (TransactionCreatedEvent) تولید کنه تا بقیهٔ ماژول‌ها بتونن گوش بدن.

✅ Tests:

حداقل یک تست برای هر API و سرویس.

✅ Documentation:

یک Module_README بنویس شامل ERD، endpointها، مثال request/response.

